{- Razor's Sample Specification

   File       : gdrive.raz
   
   Description: This specification exercises some of the intermediate access
   permissions policies on google drive documents.

   ** Please uncomment one query at a time before running Razor on this
   specification.
-}

--------------------------------------------------
-- Type Definition:
--------------------------------------------------
Read(u,d)       => User(u)     & Document(d);
accessOf(a) = p => Document(d) & Access(a);

-- User, Document and Access are disjoint sorts:
User(x) & Document(x)       => Falsehood;
User(x) & Access(x)     => Falsehood;
Document(x) & Access(x) => Falsehood;

--------------------------------------------------
-- Facts:
--------------------------------------------------
{- There are 3 built-in access levels:
-}
Access('Private);
Access('SpecificUsers);
Access('AnyoneWithLink);

{- No other access levels other than the 3 built-in ones are allowed:
-}
Access(p) => p = 'Private
	       |  p = 'SpecificUsers
	       |  p = 'AnyoneWithLink;

{- The 3 built-in access levels are different from each other:
-}
'Private  = 'SpecificUsers       => Falsehood;
'Private  = 'AnyoneWithLink      => Falsehood;
'Private  = 'Public              => Falsehood;
'SpecificUsers = 'AnyoneWithLink => Falsehood;

--------------------------------------------------
-- Some Axioms:
--------------------------------------------------
{- For every document, there exists a user who is the owner
-}
Document(d) => exists o. Own(o, d);

{- All documents must be assigned to some access level:
-}
Document(d) => exists a. accessOf(d) = a & Access(a);

{- Users always can read the documents they own:
-}
Own(o, d) => Read(o, d);

{- When the access level of a document is Private, a user can read the document IFF they are the owner:
-}
Own(u1, d) & (accessOf(d) = 'Private) & Read(u2, d) => u1 = u2;

{- When the access level of a document is SpecificUsers, a non-owner user can read the document IFF they are invited:
-}
Document(d) & (accessOf(d) = 'SpecificUsers) & Invite(o, u) => Read(u, d);

{- When the access level of a document is AnyoneWithLink, a non-owner user can read the document IFF they have a link:
-}
Document(d) & (accessOf(d) = 'AnyoneWithLink) & HasLink(u) => Read(u, d);

{- Completion of the previous three IFF access level policies
-}
Own(o, d) & Read(u, d) => Document(d) & (accessOf(d) = 'AnyoneWithLink) & HasLink(u)
                        | Document(d) & (accessOf(d) = 'SpecificUsers) & Invite(o, u)
                        | o = u;

--------------------------------------------------
-- Queries:
--------------------------------------------------
{- Query 1: Show models where a user is reading a document:
-}
-- exists u . exists c . Read(u, c);

{- Query 2-1: Show models where the permission of a document is Private, the
   document is owned by Salman, and it is read by Ryan.
-}
-- Own('Salman, 'RoughDraft);
-- accessOf('RoughDraft) = 'Private;
-- Read('Ryan, 'RoughDraft);

{- Query 2-2: just like Query 2-1 but does not allow Salman and Ryan to be the
   same person.
-}
-- Own('Salman, 'RoughDraft);
-- accessOf('RoughDraft) = 'Private;
-- Read('Ryan, 'RoughDraft);
-- 'Salman = 'Ryan => Falsehood;

{- Query 3: How can Salman post a document such that Ryan cannot
   read the document?
-}
-- Own('Salman, 'RoughDraft);
-- Read('Ryan, 'RoughDraft) => Falsehood;

{- Query 4: Do the basic set of permissions allow Salman to share a document
   with only a specific user?
-}
-- Own('Salman, 'Feedback);
-- Invite('Salman, 'Ryan);
-- Read('Ryan, 'Feedback);
-- Read('Tim, 'Feedback) => Falsehood;
-- ~ 'Ryan = 'Salman;
-- ~ 'Ryan = 'Tim;

{- Query 5: Can we have lost documents, which cannot be read by anyone?
-}
-- Own('Someone, 'Lost);
-- Read(u, 'Lost) => Falsehood;

{- Query 6-1: Is it possible to post a document that can be read by everybody
   on GoogleDrive?
-}
-- Own('Salman, 'FinalDraft);
-- User(x) => Read(x, 'FinalDraft);

{- Query 6-2: Repeat the previous query but this time, assume Anybody (which
   is merely a name for an arbitrary user) is a user other than the person
   who is posting the content:
-}
-- Own('Salman, 'FinalDraft);
-- User('Anybody);
-- 'Anybody = 'Salman => Falsehood;
-- Read('Anybody, 'FinalDraft);

{- Query 6-3: As extra restrictions on Query 6-2, assume that Anybody cannot be
   invited by Salman to have access to the document:
-}
-- Own('Salman, 'FinalDraft);
-- User('Anybody);
-- 'Anybody = 'Salman => Falsehood;
-- Read('Anybody, 'FinalDraft);
-- Invite('Salman, 'Anybody) => Falsehood;
