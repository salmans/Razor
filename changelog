Welcome to CHASE Version 3.2

The new version is a fully functional complete re-design and re-implementation
of our algorithm for finding models for geometric theories.

Some of the major changes in version 2.0 are as follows:

     - A new modularized design with the idea of separating the model-finding
     algorithm from the underlying modules for syntax and models. In this
     implementation, a Model is a wrapper around a congruence closure term
     rewriting system, but it can easily be replaced by any other data
     structure.

     - Adopting a MapReduce philosophy for finding models in various branches of
     the input theory.

     - A new structure, Frame, which is equivalent to a geometric sequent in the
     syntactic level.

     - Introducing a new datatype, Obs (observation), for treating atomic
     formulas and terms similarly as they are added to the model.

     - A new underlying syntactic structure for handling geometric theories and
     formulas (SyntaxGeo, GeoUnification, GeoUtilities, etc.)

     - A new data constructor, Elm, for Term for separating special constants
     generated by the model-finder from user input.

     - More efficient formula instantiation and fact (obs) deduction.

     - More clear and more detailed commenting.


Minor changes:
     - Truth is a special constant in models.

     - Composition transformation in CC is fixed.

     - User inputs that are not equivalent to geometric sequents are handled by
     a new parser for sequents.

     - Pretty-printing for models.


Version 2.1
     - It uses narrowing for matching sequents.
     - CC returns the list of new rewrite rules after adding new facts.
     - A bug in Chase.IChase.holds where every fact was examined separately
     against the existing model is now fixed.
     - Enhanced code readability.
     - New test cases are added to the regression test repository (theories).
     - Minor bugs resolved.

Version 2.2
     - Uses Shostak's CC algorithm (faster than the naive implementation)
     - A new implementation of "CC/CC.normalForm" resulting into a huge speed up
     - Showing models is faster and does not show unhelpful element domains.
     - A bug in narrowing is fixed.
     - Now, new facts are added to the models in mapProblem instead of in
     reduceProblem. This resolves a bug where new facts were being added twice
     to a model when more than one instance of a frame with empty body was being
     created.
     - Make profile is restored.
     - Shows models in a more readable fashion.
     - A bug in Shostak's CC implementation is resolved where if more than one
     rule could be composed with a reference rule, one of them remained left
     in the rewrite system.
     - A garbage collection transformation is applied on Shostak's CC
     implementation to get rid of transformations in form of c -> d where both
     c and d are elements of the model (constants in K in the rewrite system).
     - Fixed a bug where every disjunct on the right needed to be true in order
     for the formula not to be instantiated.


Version 3.0
     This version is a completely redesigned implementation of the chase based
     on relational algebra:
     - Every formula is flattened in a preprocessing step and all function
     symbols are removed.
     - For every sequent, a pair of relational expression corresponding to views
     on left and right of the sequent are created. A chase step is then the
     process of pushing the tuples in the view on left, which do not exist in
     the view on right, to the view on right.
     - The congruence closure algorithm is completely removed. In the absence
     of function symbols, equality updates can be simply done by replacing an
     element in the model with another element.
     - Automatic testing (based on QuickCheck) is restored.


Coming next:
     - More efficient chase steps by implementing incremental view maintenance
     - Bug fixes (for theories thyphone1_1.txt and thyphone1_2.txt)
     - Rewriting Main.hs


Version 3.1
    - This version includes major bug fixes: all of the test theories are
    passed.
    - In order to implement a built-in congruence closure, new functions for
    generating equations to enforce integrity among function symbols are added
    added to Chase.Problem.RelAlg.Operations.
    - Functions and relations are now distinguishable even when we are treating
    functions as relations and relations as functions.

Version 3.2
    - Incremental view maintenance is used to increase the efficiency of model
    finding.

Version 3.2.1
    - Incremental view maintenance is temporarily disabled.
    - A binary for users (bin/chase) can now be created.

Version 3.2.2
    - Incremental view maintenance is now enabled.

Version 3.2.3
    - Now, the chase is fair to sequents of theory.
    - Logging is performed through a Writer monad.
    - Option -fifo/-filo for scheduling problems has been added to the chase.

Version 3.3
    - Options -bfs and -dfs replace -fifo and -filo.
    - Options -batch and -incremental have been added.
    - Now the views are recomputed in incremental model-finding when an equality
    update is performed.
    - Scheduling frames is now based on "frameProcessed" information for each
    frame.
    - Allows free variables on right. Although, there is a bug.
    - Tag information has been added to provenance information.

Version 3.3.1
    - The changes to allow free variables on right are undone. Also, the scheduling
    is back to what it was before introducing frameProcessed.

Version 3.3.2
    - Free variables on right of sequents are now allowed.
    - Pretty printing of models is developed.
    - Uses GetOpt for command line input options. (run -h for help)

Version 3.3.3
    - Introduces Big chase steps and Small chase steps: sequents that may increase
    the size of models are processed only if the sequents that preserves model
    sizes are not making progress.

Version 3.3.4
    - Replaces the notion of big and small big steps with problem schedule info
    and intorduces an order for processing frames on problems.
    - logic-TPTP dependencies are build optionally in cabal when -ftptp is passed
    as an extra parameter.

Version 3.4
    - Processes sequents systematically: sequents with empty RHS, sequents with no
    disjunctions, sequents with disjunctions and finally sequents with existentials.
    - Sequents with existential quantifiers and disjunctions are transformed to
    sequents with either disjunctions or sequents with existentials.
    - A round-robin scheduling mode is introduced.
    - Minor bug fixes and performance improvements.
    - Bounded model-finding added

Version 3.5
    - The chase can now process syntactically more relaxed input formulas. The input
    theory can be a set of first-order formulas, equivalent to a geometric theory.

Version 3.6
    - Atlas is the new name of our model-finder.
    - Atlas now processes TPTP input problems.
    - Several tools for working with TPTP libraries has been added.

Version 3.7
    - Collapsing elements based on the skolem depth of their histories (skolem
    terms) is now possible.
    - Refactoring table construction operations at Chase/Problem/RelAlg/Operations.hs
    - Minor bug fixes

Yet to come:
    - Efficient congruence closure implementation.
    - Improving the efficiency of the code as indicated by comments.
    - Fixing a bug where batch processing produces too many models.
