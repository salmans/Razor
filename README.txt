Time-stamp: <2013-02-12 00:29:12 Salman Saghafi>
Welcome to CHASE Version 2.0

The new version is a fully functional complete re-design and re-implementation
of our algorithm for finding models for geometric theories.

Some of the major changes in version 2.0 are as follows:

     - A new modularized design with the idea of separating the model-finding
     algorithm from the underlying modules for syntax and models. In this 
     implementation, a Model is a wrapper around a congruence closure term 
     rewriting system, but it can easily be replaced by any other data 
     structure.

     - Adopting a MapReduce philosophy for finding models in various branches of
     the input theory.

     - A new structure, Frame, which is equivalent to a geometric sequent in the
     syntactic level.

     - Introducing a new datatype, Obs (observation), for treating atomic 
     formulas and terms similarly as they are added to the model.

     - A new underlying syntactic structure for handling geometric theories and
     formulas (SyntaxGeo, GeoUnification, GeoUtilities, etc.)

     - A new data constructor, Elm, for Term for separating special constants 
     generated by the model-finder from user input.

     - More efficient formula instantiation and fact (obs) deduction.

     - More clear and more detailed commenting.


Minor changes:
     - Truth is a special constant in models.
     
     - Composition transformation in CC is fixed.

     - User inputs that are not equivalent to geometric sequents are handled by
     a new parser for sequents.
     
     - Pretty-printing for models.


Version 2.1
     - It uses narrowing for matching sequents.
     - CC returns the list of new rewrite rules after adding new facts.
     - A bug in Chase.IChase.holds where every fact was examined separately 
     against the existing model is now fixed.
     - Enhanced code readability.
     - New test cases are added to the regression test repository (theories).
     - Minor bugs resolved.

Version 2.2
     - Uses Shostak's CC algorithm (faster than the naive implementation)
     - A new implementation of "CC/CC.normalForm" resulting into a huge speed up
     - Showing models is faster and does not show unhelpful element domains.
     - A bug in narrowing is fixed.
     - Now, new facts are added to the models in mapProblem instead of in
     reduceProblem. This resolves a bug where new facts were being added twice
     to a model when more than one instance of a frame with empty body was being
     created.
     - Make profile is restored.


Coming next:
     - Modifying automatic testing to work with the new version.
     - WeaklyAcyclic implementaiton.
