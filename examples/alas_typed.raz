{- Razor's Sample Specification

   File       : alas_typed.raz
   
   Description: ALAS and PEDS are two research groups in the CS department,
   which share lab B17. A person can enter a lab either using a key or a
   matching ID card.
   This example contains 7 queries that exercies the policies implemented to
   control access to B17.

   ** Please uncomment one query at a time before running Razor on this
   specification.
   
-}

--------------------------------------------------
-- Facts:
--------------------------------------------------
{- ALAS and PEDS share lab B17:
-}
LabOf('ALAS, 'B17);
LabOf('PEDS, 'B17);


--------------------------------------------------
-- Rules:
--------------------------------------------------
{- A member @m@ of a research group @r@ must be able to
   enter all labs @l@ assigned to @m@:
-}
MemberOf(m, r) & LabOf(r, l) => CanEnter(m, l);

{- If a memeber @m@ has a key @k@ that opens the door of
   lab @l@, then @m@ can enter @l@:
-}
HasKey(m, k) & KeyOpens(k, l) => CanEnter(m, l);

{- If the ID card of a person @p@ opens the door of a
   lab @l@, then @p@ can enter @l@:
-}
CardOpens(cardOf(p), l) => CanEnter(p, l);

{- The other direction of the previous two axioms: If a person 
   @p@ can enter a lab @l@, she must either have a card that 
   opens @l@ or she must have some key @k@ that opens @l@:
-}
CanEnter(p, l) => CardOpens(cardOf(p), l)
	       |  (exists k. (HasKey(p, k) & KeyOpens(k, l)));


{- If an ID card opens the door of a lab @l@, then the owner of the card 
   is a member @m@ of some research group @r@ to which @l@ is assigned:
-}
CardOpens(cardOf(m), l) => exists r. MemberOf(m, r) & LabOf(r, l);

-- Members of PEDS cannot have keys that open B17. (They still can enter
-- B17 using matching ID cards.):
MemberOf(m, 'PEDS) & HasKey(m, k) & KeyOpens(k, 'B17) => Falsehood;


{- If a person @p@ has a key @k@, the key must be granted to him
   by some employee @e@ of the department office:
-}
HasKey(p, k) => exists e. Grant(e, p, k) & Employee(e);

{- Once an employee @e@ grants a key @k@ to a person @p@, the person
   is assumed to be in possession of the key:
-}
Grant(e, p, k) => HasKey(p, k);


--------------------------------------------------
-- Queries:
--------------------------------------------------

{- Query 1: Show models where ALAS has a member:
-}

-- exists m. MemberOf(m, 'ALAS);

--------------------------------------------------
{- Query 2: Show models where PEDS has a member:
-}

-- exists m. MemberOf(m, 'PEDS);

--------------------------------------------------
{- Query 3: Can ALAS members always enter B17? Show a counterexample.
-}

-- MemberOf('Salman, 'ALAS);
-- CanEnter('Salman, 'B17) => Falsehood;

--------------------------------------------------
{- Query 4: Do cards of ALAS members open B17? Show a counterexample.
-}

-- MemberOf('Ryan, 'ALAS);
-- CardOpens(cardOf('Ryan), 'B17) => Falsehood;

--------------------------------------------------
{- Query 5: Can a thief who is not either a member of ALAS nor PEDS enter B17?
-}

-- CanEnter('Thief, 'B17);
-- MemberOf('Thief, 'ALAS) => Falsehood;
-- MemberOf('Thief, 'PEDS) => Falsehood;

--------------------------------------------------
{- Query 6: Can the thief enter B17 if we restrict B17 to ALAS and PEDS only?
-}

-- CanEnter('Thief, 'B17);
-- MemberOf('Thief, 'ALAS) => Falsehood;
-- MemberOf('Thief, 'PEDS) => Falsehood;
-- LabOf(x, 'B17) => x = 'ALAS | x = 'PEDS;

--------------------------------------------------
{- Query 7: Moreover, the department grants keys to B17 to either ALAS or
   PEDS members. Can the thief enter B17 now?
-}

-- CanEnter('Thief, 'B17);
-- MemberOf('Thief, 'ALAS) => Falsehood;
-- MemberOf('Thief, 'PEDS) => Falsehood;
-- LabOf(x, 'B17) => x = 'ALAS | x = 'PEDS;
-- Grant(e, m, k) & KeyOpens(k, 'B17) => MemberOf(m, 'ALAS) | MemberOf(m, 'PEDS);
