wolf(X) => animal(X);
exists X1 . wolf(X1);

fox(X) => animal(X);
exists X1 . fox(X1);

bird(X) => animal(X);
exists X1 . bird(X1);

caterpillar(X) => animal(X);
exists X1 . caterpillar(X1);

snail(X) => animal(X);
exists X1 . snail(X1);

exists X . grain(X);
grain(X1) => plant(X1);


--
animal(X) => eats_all_plants(X) | eats_all_animals(X);

eats_all_plants(X) & plant(Y) => eats(X, Y);
eats_all_animals(X) & animal(Y) & much_smaller(Y, X) & plant(Z) & eats(Y, Z) => eats(X, Y);
--

bird(Y) & snail(X) => much_smaller(X, Y);
bird(Y) & caterpillar(X) => much_smaller(X, Y);


bird(X) & fox(Y) => much_smaller(X,Y);
fox(X) & wolf(Y) => much_smaller(X,Y);


wolf(X) & fox(Y) & eats(X, Y) => Falsehood;
wolf(X) & grain(Y) & eats(X, Y) => Falsehood;

bird(X) & caterpillar(Y) => eats(X,Y);
bird(X) & snail(Y) & eats(X,Y) => Falsehood;

caterpillar(X) => exists Y . plant(Y) & eats(X, Y);
snail(X) => exists Y . plant(Y) & eats(X, Y);

-- conjecture:
animal(X) & animal(Y) & grain(Z) & eats(Y, Z) & eats(X, Y) => Falsehood;
