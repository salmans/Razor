less(Low,High) & sum(Low,s('n0),NewLow) & range(NewLow,High,RestOfNumbers) => range(Low,High,cons(Low,RestOfNumbers));

range(Same,Same,cons(Same,'empty_list));

less('n0,s(X));

less(X,Y) => less(s(X),s(Y));

sum(X,'n0,X);

sum(X,Y,Z) => sum(X,s(Y),s(Z));

select(Head,cons(Head,Tail),Tail);

select(Element,Tail,NewTail) => select(Element,cons(Head,Tail),cons(Head,NewTail));

~ same(s(X),'n0);
~ same('n0,s(X));

same(s(X),s(Y)) => same(X,Y);

attack(Queen,PlacedQueens) => diagonal_attack(Queen,s('n0),PlacedQueens);

diagonal_attack(Queen,QueenNumber,cons(PlacedQueen,OtherPlacedQueens))
  & sum(Diagonal1,QueenNumber,PlacedQueen) & sum(PlacedQueen,QueenNumber,Diagonal2)
  & sum(QueenNumber,s('n0),NextQueenNumber) => same(Diagonal1,Queen)
    					    |  same(Diagonal2,Queen)
					    |  diagonal_attack(Queen,NextQueenNumber,OtherPlacedQueens);


~ diagonal_attack(Queen,LastQueen,'empty_list);

select(AQueen,UnplacedQueens,RestOfUnplacedQueens) & do_queens(RestOfUnplacedQueens,cons(AQueen,SafeQueens),Placement)
  => do_queens(UnplacedQueens,SafeQueens,Placement) | attack(AQueen,SafeQueens);

do_queens('empty_list,Placement,Placement);

sum(NumberOfQueens,s('n0),Low) & sum(NumberOfQueens,NumberOfQueens,High)
  & range(Low,High,Positions) & do_queens(Positions,'empty_list,Placement) => queens(NumberOfQueens,Placement);


~ queens(s(s(s('n0))),Placement);

-- We need the following to force 'n0 to denote:
Number('n0);